vcl 4.0;

import std;

backend acmetool {
    .host = "127.0.0.1";
    .port = "402";
}

backend default {
    .host = "127.0.0.1";
    .port = "8080";
}

{% if 'shiny_server' in hostvars %}
backend shiny_server {
  .host = "{{ hostvars['shiny_server']['ansible_ssh_host']}}";
  .port = "3838";
  .first_byte_timeout = 30 m;
}
{% endif %}

{% for node in groups['octavo-api'] %}
backend {{node}} {
    .host = "{{ hostvars[node]['ansible_ssh_host']}}";
    .port = "9000";
    .first_byte_timeout = 30 m;
}
{% endfor %}

sub vcl_recv {

    if (req.url ~ "^/.well-known/acme-challenge/") {
      set req.backend_hint = acmetool;
      return(pass);
    }

    if (std.port(local.ip) == 80) {
      set req.http.x-redir = "https://" + req.http.host + req.url;
      return(synth(803, "Moved permanently"));
    }
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.

    # Google Analytics cookies don't inhibit caching
    if (req.http.Cookie) {
        set req.http.Cookie = regsuball(req.http.Cookie, "(^|; ) *__utm.=[^;]+;? *", "\1"); # Remove Google Analytics Cookies

        if (req.http.Cookie == "") {
            unset req.http.Cookie;
        }
    }
{% if 'shiny_server' in hostvars %}
   if (req.url ~ "^/shiny/") {
      set req.url = regsub(req.url, "^/shiny", "");
      set req.backend_hint = shiny_server;
{% else %}
   if (false) {
{% endif %}
{% if 'octavo-api' in groups %}
{% for node in groups['octavo-api'] %}
    } else if (req.url ~"^/{{node}}/") {
      set req.backend_hint = {{node}};
{%endfor%}
{%endif%}
    } else {
      set req.backend_hint = default;
    }

    if (req.backend_hint == default) {
      return(synth(804, "Not found"));
    }

    if (req.http.Upgrade ~ "(?i)websocket") {
        return (pipe);
    }

}

sub vcl_pipe {
     if (req.http.upgrade) {
         set bereq.http.upgrade = req.http.upgrade;
     }
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.

    set beresp.do_stream = true;
    if (!bereq.url ~ "\.(jpg|png|gif|gz|tgz|bz2|tbz|mp3|ogg)$") {
        set beresp.do_gzip = true;
    }
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
    # set resp.http.Strict-Transport-Security = "max-age=31536000; includeSubDomains";

    if (obj.hits > 0) {
        set resp.http.X-Cache-Hits = obj.hits;
        set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }

}

sub vcl_synth {
    if (resp.status == 801) {
        set resp.http.Location = req.http.x-redir;
        set resp.status = 301;
        return (deliver);
    }
    if (resp.status == 804) {
        set resp.status = 404;
        return (deliver);
    }
}
